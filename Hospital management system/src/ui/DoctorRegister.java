/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import hospital.management.system.Doctor;
import hospital.management.system.DoctorDirectory;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author SHREYAS
 */
public class DoctorRegister extends javax.swing.JFrame {
    
    DoctorDirectory records;
    private TableRowSorter sorter;

    
    public DoctorRegister(DoctorDirectory records) {
        initComponents();
        if(records == null){
            this.records = new DoctorDirectory();
        }
        else{
            this.records = records;
        }
        populateDoctorTable();
        
    }
    
    public void resetForm(){
        
        dNametxt.setText("");
        dAgetxt.setText("");
        dContacttxt.setText("");
//        radiobtnMale.setSelected(false);
//        radiobtnFemale.setSelected(false);
//        radiobtnOther.setSelected(false);
        dGendertxt.setSelectedItem("");
       
        dHousetxt.setText("");
        //dStreettxt.setText("");
        dCommunitytxt.setText("");
        dCitytxt.setText("");
        dStatetxt.setText("");
        dZipCodetxt.setText("");
       
        dHospitalNametxt.setSelectedItem("");
        //dAvailableSlotstxt.setText("");
        dQualificationstxt.setText("");
        dSpecializationtxt.setText("");
       
        dDoctorIDtxt.setText("");
        dEmailIDtxt.setText("");
        dPasswordtxt.setText("");
        dRePasswordtxt.setText("");
    }

    /**
     * Creates new form DoctorRegister
     */
    public DoctorRegister() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        personPersonalDetails = new javax.swing.JPanel();
        dNametxt = new javax.swing.JTextField();
        patientNameLbl = new javax.swing.JLabel();
        patientContactLbl = new javax.swing.JLabel();
        dContacttxt = new javax.swing.JTextField();
        patientDOBLbl1 = new javax.swing.JLabel();
        dAgetxt = new javax.swing.JTextField();
        patientDOBLbl = new javax.swing.JLabel();
        patientDOBLbl2 = new javax.swing.JLabel();
        dGendertxt = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dSpecializationtxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        dQualificationstxt = new javax.swing.JTextField();
        dHospitalNametxt = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        dEmailIDtxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        patientPatientIDLbl1 = new javax.swing.JLabel();
        dDoctorIDtxt = new javax.swing.JTextField();
        dPasswordtxt = new javax.swing.JPasswordField();
        dRePasswordtxt = new javax.swing.JPasswordField();
        personPersonalDetails1 = new javax.swing.JPanel();
        dHousetxt = new javax.swing.JTextField();
        patientHouseLbl = new javax.swing.JLabel();
        dCommunitytxt = new javax.swing.JTextField();
        patientCommunityLbl = new javax.swing.JLabel();
        patientCityLbl = new javax.swing.JLabel();
        dCitytxt = new javax.swing.JTextField();
        dStatetxt = new javax.swing.JTextField();
        patientStateLbl = new javax.swing.JLabel();
        patientZipCodeLbl = new javax.swing.JLabel();
        dZipCodetxt = new javax.swing.JTextField();
        doctorCanceltBtn = new javax.swing.JButton();
        doctorRegisterBtn = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        searchDoctor = new javax.swing.JButton();
        dSearchBartxt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        DoctorTableViewtxt = new javax.swing.JTable();
        dNameModifytxt = new javax.swing.JTextField();
        dHouseModifytxt = new javax.swing.JTextField();
        patientNameLbl2 = new javax.swing.JLabel();
        patientContactLbl2 = new javax.swing.JLabel();
        dContactModifytxt = new javax.swing.JTextField();
        patientStreetLbl1 = new javax.swing.JLabel();
        patientHouseLbl1 = new javax.swing.JLabel();
        dStreetModifytxt = new javax.swing.JTextField();
        patientEmailIDLbl2 = new javax.swing.JLabel();
        dEmailIDModifytxt = new javax.swing.JTextField();
        patientGenderLbl2 = new javax.swing.JLabel();
        patientCommunityLbl1 = new javax.swing.JLabel();
        dCommunityModifytxt = new javax.swing.JTextField();
        dCityModifytxt = new javax.swing.JTextField();
        patientCityLbl1 = new javax.swing.JLabel();
        patientAgeLbl2 = new javax.swing.JLabel();
        dAgeModifytxt = new javax.swing.JTextField();
        patientStateLbl1 = new javax.swing.JLabel();
        dStateModifytxt = new javax.swing.JTextField();
        patientDOBLbl3 = new javax.swing.JLabel();
        patientZipCodeLbl1 = new javax.swing.JLabel();
        dZipCodeModifytxt = new javax.swing.JTextField();
        dDoctorIDModifytxt = new javax.swing.JTextField();
        patientContactLbl3 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        dSpecializationModifytxt = new javax.swing.JTextField();
        modifyDoctorViewBtn = new javax.swing.JButton();
        modifyDoctorUpdateBtn = new javax.swing.JButton();
        modifyDoctorDeleteBtn = new javax.swing.JButton();
        dQualificationsModifytxt = new javax.swing.JTextField();
        dGenderModifytxt = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N

        jPanel4.setBackground(new java.awt.Color(0, 153, 102));
        jPanel4.setForeground(new java.awt.Color(204, 153, 255));

        personPersonalDetails.setBackground(new java.awt.Color(0, 153, 102));
        personPersonalDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Personal Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 3, 13))); // NOI18N
        personPersonalDetails.setForeground(new java.awt.Color(204, 153, 255));
        personPersonalDetails.setPreferredSize(new java.awt.Dimension(400, 250));
        personPersonalDetails.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dNametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dNametxtActionPerformed(evt);
            }
        });
        dNametxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dNametxtKeyTyped(evt);
            }
        });
        personPersonalDetails.add(dNametxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 235, -1));

        patientNameLbl.setText("Name");
        personPersonalDetails.add(patientNameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(53, 41, -1, -1));

        patientContactLbl.setText("Contact");
        personPersonalDetails.add(patientContactLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 93, -1, -1));

        dContacttxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dContacttxtKeyTyped(evt);
            }
        });
        personPersonalDetails.add(dContacttxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 90, 234, -1));

        patientDOBLbl1.setText("Age");
        personPersonalDetails.add(patientDOBLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 174, -1, -1));
        personPersonalDetails.add(dAgetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 170, 234, -1));

        patientDOBLbl.setText("DOB");
        personPersonalDetails.add(patientDOBLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 225, -1, -1));

        patientDOBLbl2.setText("Gender");
        personPersonalDetails.add(patientDOBLbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 136, 53, -1));

        dGendertxt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Non-binary", "Prefer not to answer" }));
        personPersonalDetails.add(dGendertxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 235, -1));

        jPanel3.setBackground(new java.awt.Color(0, 153, 102));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Medical Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 3, 13))); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(400, 250));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Qualifications");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 61, -1, -1));

        jLabel3.setText("Specialization");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 110, -1, -1));

        dSpecializationtxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dSpecializationtxtKeyTyped(evt);
            }
        });
        jPanel3.add(dSpecializationtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(121, 107, 232, -1));

        jLabel7.setText("Hospital Name");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 159, -1, 23));

        dQualificationstxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dQualificationstxtActionPerformed(evt);
            }
        });
        dQualificationstxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dQualificationstxtKeyTyped(evt);
            }
        });
        jPanel3.add(dQualificationstxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 55, 230, -1));

        dHospitalNametxt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel3.add(dHospitalNametxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 159, 230, -1));

        jPanel5.setBackground(new java.awt.Color(0, 153, 102));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Account Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 3, 13))); // NOI18N
        jPanel5.setPreferredSize(new java.awt.Dimension(400, 250));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel5.add(dEmailIDtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 100, 234, -1));

        jLabel4.setText("Set Password");
        jPanel5.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 155, -1, -1));

        jLabel5.setText("Email ID");
        jPanel5.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(61, 103, -1, -1));

        jLabel6.setText("Confirm Password");
        jPanel5.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 207, -1, -1));

        patientPatientIDLbl1.setText("Doctor ID");
        jPanel5.add(patientPatientIDLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 51, -1, -1));
        jPanel5.add(dDoctorIDtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 48, 234, -1));
        jPanel5.add(dPasswordtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 152, 230, -1));
        jPanel5.add(dRePasswordtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 204, 230, -1));

        personPersonalDetails1.setBackground(new java.awt.Color(0, 153, 102));
        personPersonalDetails1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Address", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 3, 13))); // NOI18N
        personPersonalDetails1.setForeground(new java.awt.Color(255, 153, 255));
        personPersonalDetails1.setPreferredSize(new java.awt.Dimension(400, 250));
        personPersonalDetails1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dHousetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dHousetxtActionPerformed(evt);
            }
        });
        personPersonalDetails1.add(dHousetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 26, 232, -1));

        patientHouseLbl.setText("House");
        personPersonalDetails1.add(patientHouseLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 29, -1, -1));

        dCommunitytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dCommunitytxtActionPerformed(evt);
            }
        });
        dCommunitytxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dCommunitytxtKeyTyped(evt);
            }
        });
        personPersonalDetails1.add(dCommunitytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 232, -1));

        patientCommunityLbl.setText("Community");
        personPersonalDetails1.add(patientCommunityLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, -1));

        patientCityLbl.setText("City");
        personPersonalDetails1.add(patientCityLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 110, -1, -1));

        dCitytxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dCitytxtKeyTyped(evt);
            }
        });
        personPersonalDetails1.add(dCitytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 110, 232, -1));

        dStatetxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dStatetxtActionPerformed(evt);
            }
        });
        dStatetxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dStatetxtKeyTyped(evt);
            }
        });
        personPersonalDetails1.add(dStatetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, 232, -1));

        patientStateLbl.setText("State");
        personPersonalDetails1.add(patientStateLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, -1, -1));

        patientZipCodeLbl.setText("Zipcode");
        personPersonalDetails1.add(patientZipCodeLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, -1, -1));

        dZipCodetxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dZipCodetxtKeyTyped(evt);
            }
        });
        personPersonalDetails1.add(dZipCodetxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, 232, -1));

        doctorCanceltBtn.setText("Cancel");
        doctorCanceltBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        doctorRegisterBtn.setText("Register");
        doctorRegisterBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        doctorRegisterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorRegisterBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(personPersonalDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(personPersonalDetails1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(239, 239, 239)
                        .addComponent(doctorRegisterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(261, 261, 261)
                        .addComponent(doctorCanceltBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(personPersonalDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(personPersonalDetails1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(doctorCanceltBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctorRegisterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Registration", jPanel4);

        jPanel6.setBackground(new java.awt.Color(0, 153, 102));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        searchDoctor.setText("Search");
        searchDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDoctorActionPerformed(evt);
            }
        });
        jPanel6.add(searchDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(539, 6, -1, -1));

        dSearchBartxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dSearchBartxtActionPerformed(evt);
            }
        });
        jPanel6.add(dSearchBartxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(351, 6, 170, -1));

        DoctorTableViewtxt.setBackground(new java.awt.Color(0, 153, 102));
        DoctorTableViewtxt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Doctor ID", "Name ", "Contact", "Email ID", "Gender", "Age", "DOB", "Qualifications", "Specialization"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(DoctorTableViewtxt);

        jPanel6.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 41, 962, 226));

        dNameModifytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dNameModifytxtActionPerformed(evt);
            }
        });
        jPanel6.add(dNameModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 301, 232, -1));

        dHouseModifytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dHouseModifytxtActionPerformed(evt);
            }
        });
        jPanel6.add(dHouseModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(628, 301, 232, -1));

        patientNameLbl2.setText("Name");
        jPanel6.add(patientNameLbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(89, 304, -1, -1));

        patientContactLbl2.setText("Contact");
        jPanel6.add(patientContactLbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(79, 346, -1, -1));
        jPanel6.add(dContactModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 343, 130, -1));

        patientStreetLbl1.setText("Street");
        jPanel6.add(patientStreetLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(579, 346, -1, -1));

        patientHouseLbl1.setText("House");
        jPanel6.add(patientHouseLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(576, 304, -1, -1));
        jPanel6.add(dStreetModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(628, 343, 130, -1));

        patientEmailIDLbl2.setText("Email ID");
        jPanel6.add(patientEmailIDLbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(86, 430, -1, -1));
        jPanel6.add(dEmailIDModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 427, 140, -1));

        patientGenderLbl2.setText("Gender");
        jPanel6.add(patientGenderLbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 472, -1, -1));

        patientCommunityLbl1.setText("Community");
        jPanel6.add(patientCommunityLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(547, 388, -1, -1));

        dCommunityModifytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dCommunityModifytxtActionPerformed(evt);
            }
        });
        jPanel6.add(dCommunityModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(628, 385, 130, -1));
        jPanel6.add(dCityModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(628, 427, 130, -1));

        patientCityLbl1.setText("City");
        jPanel6.add(patientCityLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(586, 430, -1, -1));

        patientAgeLbl2.setText("Age");
        jPanel6.add(patientAgeLbl2, new org.netbeans.lib.awtextra.AbsoluteConstraints(109, 514, -1, -1));

        dAgeModifytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dAgeModifytxtActionPerformed(evt);
            }
        });
        dAgeModifytxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                dAgeModifytxtKeyTyped(evt);
            }
        });
        jPanel6.add(dAgeModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 511, 140, -1));

        patientStateLbl1.setText("State");
        jPanel6.add(patientStateLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(583, 472, -1, -1));

        dStateModifytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dStateModifytxtActionPerformed(evt);
            }
        });
        jPanel6.add(dStateModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(628, 469, 130, -1));

        patientDOBLbl3.setText("DOB");
        jPanel6.add(patientDOBLbl3, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 559, -1, -1));

        patientZipCodeLbl1.setText("Zipcode");
        jPanel6.add(patientZipCodeLbl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(566, 517, -1, -1));
        jPanel6.add(dZipCodeModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(628, 511, -1, -1));

        dDoctorIDModifytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dDoctorIDModifytxtActionPerformed(evt);
            }
        });
        jPanel6.add(dDoctorIDModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 385, 140, -1));

        patientContactLbl3.setText("Doctor ID");
        jPanel6.add(patientContactLbl3, new org.netbeans.lib.awtextra.AbsoluteConstraints(79, 388, -1, -1));

        jLabel9.setText("Qualifications");
        jPanel6.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 602, -1, -1));

        jLabel10.setText("Specialization");
        jPanel6.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 560, -1, -1));

        dSpecializationModifytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dSpecializationModifytxtActionPerformed(evt);
            }
        });
        jPanel6.add(dSpecializationModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 560, 232, -1));

        modifyDoctorViewBtn.setText("View");
        modifyDoctorViewBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        modifyDoctorViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyDoctorViewBtnActionPerformed(evt);
            }
        });
        jPanel6.add(modifyDoctorViewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 610, 110, 30));

        modifyDoctorUpdateBtn.setText("Update");
        modifyDoctorUpdateBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        modifyDoctorUpdateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyDoctorUpdateBtnActionPerformed(evt);
            }
        });
        jPanel6.add(modifyDoctorUpdateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 610, 110, 30));

        modifyDoctorDeleteBtn.setText("Delete");
        modifyDoctorDeleteBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        modifyDoctorDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyDoctorDeleteBtnActionPerformed(evt);
            }
        });
        jPanel6.add(modifyDoctorDeleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 610, 82, 34));
        jPanel6.add(dQualificationsModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(147, 599, 233, -1));

        dGenderModifytxt.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male\t", "Female\t", "Non-binary", "Prefer not to answer" }));
        jPanel6.add(dGenderModifytxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 469, -1, -1));

        jTabbedPane1.addTab("Modifications", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 980, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 687, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dNametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dNametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dNametxtActionPerformed

    private void dNametxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dNametxtKeyTyped
        // TODO add your handling code here:
        char dName = evt.getKeyChar();
        if(!Character.isAlphabetic(dName) && !Character.isWhitespace(dName)){
            evt.consume();
        }
        //Restrict the length to 256
        if(dNametxt.getText().length() > 100){
            evt.consume();
        }
    }//GEN-LAST:event_dNametxtKeyTyped

    private void dContacttxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dContacttxtKeyTyped
        // TODO add your handling code here:

        char typedContactNumber = evt.getKeyChar();
        if(!Character.isDigit(typedContactNumber)){
            evt.consume();
        }
        //Restrict the length to 10
        if(dContacttxt.getText().length() == 10){
            evt.consume();
        }
    }//GEN-LAST:event_dContacttxtKeyTyped

    private void dSpecializationtxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dSpecializationtxtKeyTyped
        // TODO add your handling code here:
        char dSpecialization = evt.getKeyChar();
        if(!Character.isAlphabetic(dSpecialization) && !Character.isWhitespace(dSpecialization)){
            evt.consume();
        }
        //Restrict the length to 256
        if(dSpecializationtxt.getText().length() > 100){
            evt.consume();
        }

    }//GEN-LAST:event_dSpecializationtxtKeyTyped

    private void dQualificationstxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dQualificationstxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dQualificationstxtActionPerformed

    private void dQualificationstxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dQualificationstxtKeyTyped
        // TODO add your handling code here:
        char dQualifications = evt.getKeyChar();
        if(!Character.isAlphabetic(dQualifications) && !Character.isWhitespace(dQualifications)){
            evt.consume();
        }
        //Restrict the length to 256
        if(dQualificationstxt.getText().length() > 100){
            evt.consume();
        }

    }//GEN-LAST:event_dQualificationstxtKeyTyped

    private void dHousetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dHousetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dHousetxtActionPerformed

    private void dCommunitytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dCommunitytxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dCommunitytxtActionPerformed

    private void dCommunitytxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dCommunitytxtKeyTyped
        // TODO add your handling code here:

        char dCommunity = evt.getKeyChar();
        if(!Character.isAlphabetic(dCommunity) && !Character.isWhitespace(dCommunity)){
            evt.consume();
        }
        //Restrict the length to 256
        if(dCommunitytxt.getText().length() > 100){
            evt.consume();
        }
    }//GEN-LAST:event_dCommunitytxtKeyTyped

    private void dCitytxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dCitytxtKeyTyped
        // TODO add your handling code here:

        char dCity = evt.getKeyChar();
        if(!Character.isAlphabetic(dCity) && !Character.isWhitespace(dCity)){
            evt.consume();
        }
        //Restrict the length to 256
        if(dCitytxt.getText().length() > 100){
            evt.consume();
        }
    }//GEN-LAST:event_dCitytxtKeyTyped

    private void dStatetxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dStatetxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dStatetxtActionPerformed

    private void dStatetxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dStatetxtKeyTyped
        // TODO add your handling code here:
        char dState = evt.getKeyChar();
        if(!Character.isAlphabetic(dState) && !Character.isWhitespace(dState)){
            evt.consume();
        }
        //Restrict the length to 256
        if(dStatetxt.getText().length() > 100){
            evt.consume();
        }
    }//GEN-LAST:event_dStatetxtKeyTyped

    private void dZipCodetxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dZipCodetxtKeyTyped
        // TODO add your handling code here:

        try{
            //Allow only digits in Zip field
            char typedZipCode = evt.getKeyChar();
            if(!Character.isDigit(typedZipCode)){
                evt.consume();
            }
            //Restrict the length to 5
            if(dZipCodetxt.getText().length() > 4){
                evt.consume();
            }
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_dZipCodetxtKeyTyped

    private void doctorRegisterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorRegisterBtnActionPerformed
        // TODO add your handling code here:
        //Personal Info

        //1
        //        String name = dNametxt.getText();
        //        String gender = (String) dGendertxt.getSelectedItem();
        //        int age = Integer.parseInt(dAgetxt.getText());
        //        long contact = Long.parseLong(dContacttxt.getText());
        //        //add line for photo (ImageIcon)
        //
        //        //Address
        //        String houseNumber = dHousetxt.getText();
        //        String street = dStreettxt.getText();
        //        String community = dCommunitytxt.getText();
        //        String city = dCitytxt.getText();
        //        String state = dStatetxt.getText();
        //        int zipCode = Integer.parseInt(dZipCodetxt.getText());
        //
        //        //Health Info
        //        String hospitalName = (String) dHospitalNametxt.getSelectedItem();
        //        int availableSlots = Integer.parseInt(dAvailableSlotstxt.getText());
        //        String qualification = dQualificationstxt.getText();
        //        String specialization = dSpecializationtxt.getText();
        //
        //        //Account details
        //        int doctorID = Integer.parseInt(dDoctorIDtxt.getText());
        //        String email = dEmailIDtxt.getText();
        //        String password = dPasswordtxt.getText();
        //
        //        Doctor doctor = records.addNewDoctor
        //        ();
        //
        //        doctor.setName(name);
        //        doctor.setGender(gender);
        //        doctor.setContactDetails(contact);
        //        doctor.setAge(age);
        //        doctor.setDoctorID(doctorID);
        //        //image
        //
        //        //Address Info
        //        //doctor.residence.setHouseNumber(houseNumber);
        //        doctor.residence.setStreetName(street);
        //        doctor.residence.setCommunityName(community);
        //        doctor.residence.setCityName(city);
        //        doctor.residence.setState(state);
        //        doctor.residence.setZip(zipCode);
        //
        //        //Health
        //        doctor.hospital.setHospitalName(hospitalName);
        //        doctor.setSlotsAvailable(availableSlots);
        //        doctor.setQualification(qualification);
        //        doctor.setSpecialization(specialization);
        //
        //        //Account creds
        //        doctor.setEmailId(email);
        //
        //        doctor.setPassword(password);

        //11

        Doctor doc=new Doctor();
        doc.setName(dNametxt.getText());
        doc.setContactDetails(Long.parseLong(dContacttxt.getText()));
        doc.setEmailId(dEmailIDtxt.getText());
        doc.setGender((String)dGendertxt.getSelectedItem());
        doc.setDoctorID(Integer.parseInt(dDoctorIDtxt.getText()));
        String Doc_pwd=new String(dPasswordtxt.getPassword());
        doc.setQualification((dQualificationstxt.getText()));
        doc.setSpecialization((dSpecializationtxt.getText()));

        if(Validation() == true){
            DoctorDirectory.records.add(doc);
            JOptionPane.showMessageDialog(this, "Doctor Successfully Added");
            resetForm();
        }

        populateDoctorTable();

    }//GEN-LAST:event_doctorRegisterBtnActionPerformed

    private void searchDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDoctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchDoctorActionPerformed

    private void dSearchBartxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dSearchBartxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dSearchBartxtActionPerformed

    private void dNameModifytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dNameModifytxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dNameModifytxtActionPerformed

    private void dHouseModifytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dHouseModifytxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dHouseModifytxtActionPerformed

    private void dCommunityModifytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dCommunityModifytxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dCommunityModifytxtActionPerformed

    private void dAgeModifytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dAgeModifytxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dAgeModifytxtActionPerformed

    private void dAgeModifytxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dAgeModifytxtKeyTyped
        // TODO add your handling code here:
        char typedAge = evt.getKeyChar();
        if(!Character.isDigit(typedAge)){
            evt.consume();
        }
        //Restrict the length to 5
        if(dAgeModifytxt.getText().length() > 2){
            evt.consume();
        }
    }//GEN-LAST:event_dAgeModifytxtKeyTyped

    private void dStateModifytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dStateModifytxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dStateModifytxtActionPerformed

    private void dDoctorIDModifytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dDoctorIDModifytxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dDoctorIDModifytxtActionPerformed

    private void dSpecializationModifytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dSpecializationModifytxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dSpecializationModifytxtActionPerformed

    private void modifyDoctorViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyDoctorViewBtnActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = DoctorTableViewtxt.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) DoctorTableViewtxt.getModel();
        //Patient selectedPatient=(Patient)model.getValueAt(selectedRowIndex, 1);
        Doctor selectedDoctor =(Doctor)model.getValueAt(selectedRowIndex,0);

        dNameModifytxt.setText(selectedDoctor.getName());
        dEmailIDModifytxt.setText(selectedDoctor.getEmailId());
        dDoctorIDModifytxt.setText(String.valueOf(selectedDoctor.getDoctorID()));
        dContactModifytxt.setText(String.valueOf(selectedDoctor.getContactDetails()));
        dGenderModifytxt.setSelectedItem(selectedDoctor.getGender());
        dAgeModifytxt.setText(String.valueOf(selectedDoctor.getAge()));

        dHouseModifytxt.setText(selectedDoctor.residence.getHouseNumber());
        dStreetModifytxt.setText(selectedDoctor.residence.getStreetName());
        dCommunityModifytxt.setText(selectedDoctor.residence.getCommunityName());
        dCityModifytxt.setText(selectedDoctor.residence.getCityName());

        dStateModifytxt.setText(selectedDoctor.residence.getState());
        dZipCodeModifytxt.setText(String.valueOf(selectedDoctor.residence.getZip()));
        //dHospitalNameModifytxt.setSelectedItem(selectedDoctor.hospital.getHospitalName());

        dQualificationsModifytxt.setText(selectedDoctor.getQualification());
        dSpecializationModifytxt.setText(selectedDoctor.getSpecialization());
    }//GEN-LAST:event_modifyDoctorViewBtnActionPerformed

    private void modifyDoctorUpdateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyDoctorUpdateBtnActionPerformed
        // TODO add your handling code here:
        //        int selectedRowIndex=DoctorTableViewtxt.getSelectedRow();
        //
        //        if (selectedRowIndex<0){
            //            JOptionPane.showMessageDialog(this,"Please select a row to View First and then Update");
            //            return;
            //        }
        //        DefaultTableModel model = (DefaultTableModel) DoctorTableViewtxt.getModel();
        //         //selectedPatient=(Patient)model.getValueAt(selectedRowIndex,0);
        //         Doctor selectedDoctor =(Doctor)model.getValueAt(selectedRowIndex,1);
        //
        //        String name=dNametxt.getText();
        //        if (!selectedDoctor.getName().equals(name)){
            //            selectedDoctor.setName(name);
            //            model.setValueAt(name,selectedRowIndex,0);
            //        }

        int selectedRowIndex = DoctorTableViewtxt.getSelectedRow();
        DefaultTableModel model1 = (DefaultTableModel) DoctorTableViewtxt.getModel();
        Doctor selectedDoctor=(Doctor)model1.getValueAt(selectedRowIndex, 0);

        selectedDoctor.setDoctorID(Integer.parseInt(dDoctorIDModifytxt.getText()));
        selectedDoctor.setName(dNameModifytxt.getText());
        selectedDoctor.setDoctorID(Integer.parseInt(dDoctorIDModifytxt.getText()));
        selectedDoctor.setContactDetails(Long.parseLong(dContactModifytxt.getText()));
        selectedDoctor.setEmailId(dEmailIDModifytxt.getText());

        selectedDoctor.setGender((String)dGenderModifytxt.getSelectedItem());
        selectedDoctor.setAge(Integer.parseInt(dAgeModifytxt.getText()));
        selectedDoctor.setQualification(dQualificationsModifytxt.getText());
        selectedDoctor.setSpecialization(dSpecializationModifytxt.getText());

        selectedDoctor.residence.setHouseNumber((dHouseModifytxt.getText()));
        selectedDoctor.residence.setStreetName(dStreetModifytxt.getText());
        selectedDoctor.residence.setCommunityName(dCommunityModifytxt.getText());
        selectedDoctor.residence.setCityName(dCityModifytxt.getText());
        selectedDoctor.residence.setState(dStateModifytxt.getText());
        selectedDoctor.residence.setZip(Integer.parseInt(dZipCodeModifytxt.getText()));
        //selectedDoctor.hospital.setHospitalName((String)dHospitalNameModifytxt.getSelectedItem());

        //selectedDoctor.setHospitalName(dHospitalNameModifytxt.getSelectedItem());
        populateDoctorTable();

        //int selectedRowIndex=DoctorTableViewtxt.getSelectedRow();
        //
        //        DefaultTableModel model = (DefaultTableModel) DoctorTableViewtxt.getModel();
        //
        ////        System.out.println("Checking row no");
        //        Doctor selectedDoctor =(Doctor)model.getValueAt(selectedRowIndex,1);
        //
        //        //Personal Info
        //        String name = dNameModifytxt.getText();
        //        int age = Integer.parseInt(dAgeModifytxt.getText());
        //        long contact = Long.parseLong(dContactModifytxt.getText());
        //        int doctorID = Integer.parseInt(dDoctorIDModifytxt.getText());
        //        String email = dEmailIDModifytxt.getText();
        //        String gender = (String) dGenderModifytxt.getSelectedItem();
        //        Date date = dDOBModifytxt.getDate();
        //        String qualification = dQualificationsModifytxt.getText();
        //        String specialization = dSpecializationModifytxt.getText();
        //        //add line for photo (ImageIcon)
        //
        //        //Address
        //        int houseNo = Integer.parseInt(dHouseModifytxt.getText());
        //        String street = dStreetModifytxt.getText();
        //        String community = dCommunityModifytxt.getText();
        //        String city = dCityModifytxt.getText();
        //        String state = dStateModifytxt.getText();
        //        int zipCode = Integer.parseInt(dZipCodeModifytxt.getText());
        //        String hospitalName = (String) dHospitalNameModifytxt.getSelectedItem();
        //        //Health Info
        //
        //
        //        //String password = new String(txtPassword2.getPassword());
        //
        //        selectedDoctor.setName(name);
        //        selectedDoctor.setGender(gender);
        //        selectedDoctor.setContactDetails(contact);
        //        selectedDoctor.setAge(age);
        //        //image
        //
        //        //Address Info
        //        //selectedDoctor.residence.setHouseNumber(houseNumber);
        //        selectedDoctor.residence.setStreetName(street);
        //        selectedDoctor.residence.setCommunityName(community);
        //        selectedDoctor.residence.setCityName(city);
        //        selectedDoctor.residence.setState(state);
        //        selectedDoctor.residence.setZip(zipCode);
        //
        //        //Health
        //        selectedDoctor.hospital.setHospitalName(hospitalName);
        //        //selectedDoctor.setSlotsAvailable(availableSlots);
        //        selectedDoctor.setQualification(qualification);
        //        selectedDoctor.setSpecialization(specialization);
        //        //Account creds
        //        selectedDoctor.setDoctorID(doctorID);
        //        selectedDoctor.setUserName(email);
        //        //selectedDoctor.setPassword(password);
        //
        //        JOptionPane.showMessageDialog(this, "New Patient Registered");
        //
        //        resetForm();
        //        populateDoctorTable();

    }//GEN-LAST:event_modifyDoctorUpdateBtnActionPerformed

    private void modifyDoctorDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyDoctorDeleteBtnActionPerformed
        // TODO add your handling code here:

        int rowIndex = DoctorTableViewtxt.getSelectedRow();
        if (rowIndex<0){
            JOptionPane.showMessageDialog(this,"Please select a row to delete");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) DoctorTableViewtxt.getModel();
        //        System.out.print(model.getValueAt(rowIndex,0));
        Doctor selectedDoctor =(Doctor)model.getValueAt(rowIndex,0);
        records.deleteDoctor(selectedDoctor);

        JOptionPane.showMessageDialog(this,"Doctor Deleted");
        populateDoctorTable();
    }//GEN-LAST:event_modifyDoctorDeleteBtnActionPerformed
    
    boolean Validation()
        {
        String name, contact, gender, age;
        String quali, spec, hospitalname, availslots;
        String house, community, city,state,zipcode;
        String docID, emailID, setpass, conpasss;
        Date dob;
 
        //String patternEmail = "^[A-Za-z0-9+_.-]+@(.+)$";
        String patternEmail = "^[(a-zA-Z-0-9-\\_\\+\\.)]+@[(a-z-A-z)]+\\.[(a-zA-z)]{2,3}$";
                
        ///
        name = dNametxt.getText();
        contact = dContacttxt.getText();
        age = dAgetxt.getText();
        
        
        ///
        
        quali = dQualificationstxt.getText();
        spec = dSpecializationtxt.getText();
        //hospitalname = dHospitalNametxt.getText();
        //availslots =dAvailableSlotstxt.getText();
        
        ///
        house = dHousetxt.getText();
        community = dCommunitytxt.getText();
        city = dCitytxt.getText();
        state = dStatetxt.getText();
        zipcode = dZipCodetxt.getText();
        //bloodGroup = (String) patientBloodGroupTxt.getSelectedItem();
        ///
        
        docID = dDoctorIDtxt.getText();
        emailID = dEmailIDtxt.getText();
        String password = new String(dPasswordtxt.getPassword());
        String rePassword = new String(dRePasswordtxt.getPassword());
        
        
        
        if (name.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter Name");
            return false;
        }
        
        if (contact.equals(""))
                if (contact.equals("") || !(dContacttxt.getText().length()==10))
        {
            JOptionPane.showMessageDialog(this, "Please enter valid contact Number");
            dContacttxt.setText("");
            
            return false;
        }
        
        if (age.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter age");
            return false;
        }
        //emailIDTxt.getText().isBlank() 
        
        
        
        if (quali.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter Qualifications");
            return false;
        }
        
        if (spec.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter Specialization");
            return false;
        }
        
//        if (availslots.equals(""))
//        {
//            JOptionPane.showMessageDialog(this, "Please enter Available slots");
//            return false;
//        }
        
        if (house.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter house");
            return false;
        }
        
        if (community.equals("") )
        {
            JOptionPane.showMessageDialog(this, "Please enter community");
        }
        
        
        if (city.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter city");
            return false;
        }
        
        

        if (state.equals("") )
        {
            JOptionPane.showMessageDialog(this, "Please enter state");
        }
       
        
        if (zipcode.equals("") )
        {
            JOptionPane.showMessageDialog(this, "Please enter zip code");
        }
    
        
        
        
        if( !dEmailIDtxt.getText().matches(patternEmail)){
                JOptionPane.showMessageDialog(this, "Please enter a valid Email.");
                dEmailIDtxt.setText("");
                return false;
            }
        
        if (password.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter rePassword");
            return false;
        }
        
        if (rePassword.equals(""))
        {
            JOptionPane.showMessageDialog(this, "Please enter rePassword");
            return false;
        }
        
        if (!(password).equals(rePassword)){
            JOptionPane.showMessageDialog(this, "Password doesn't match");
            return false;
        }
        
        return true;
        
    }
    private void populateDoctorTable() {
        //Type-cast table model into default table model
        DefaultTableModel model = (DefaultTableModel) DoctorTableViewtxt.getModel();
        
        sorter = new TableRowSorter<>(model);
      
        //tblDisplay = new JTable(model);
        DoctorTableViewtxt.setRowSorter(sorter);
        //Clear the table 
        model.setRowCount(0);
        
        //Iterate through the records and fill row cells
        for(Doctor p: records.getRecords()){
            
            // Create a row object (dtype: Object, size: number of columns required)
            Object[] row = new Object[9];
            row[0] = p;
            row[1] = p.getName();
            row[2] = p.getContactDetails();
            row[3] = p.getEmailId();
            row[4] = p.getGender();
            row[5] = p.getAge();
            row[6] = p.getDate();
            row[7] = p.getQualification();
            row[8] = p.getSpecialization();
            //row[9] = p.hospital.getHospitalName();
            
//            row[9] = p.residence.getHouseNumber();
//            //row[11] = p.residence.getStreetName();
//            row[10] = p.residence.getCommunityName();
//            row[11] = p.residence.getCityName();
//            row[12] = p.residence.getState();
//            row[13] = p.residence.getZip();
            
            model.addRow(row);
                  
        }
        
        //--------------
        dSearchBartxt.getDocument().addDocumentListener(new DocumentListener() {
         @Override
         public void insertUpdate(DocumentEvent e) {
            search(dSearchBartxt.getText());
         }
         @Override
         public void removeUpdate(DocumentEvent e) {
            search(dSearchBartxt.getText());
         }
         @Override
         public void changedUpdate(DocumentEvent e) {
            search(dSearchBartxt.getText());
         }
         public void search(String str) {
            if (str.length() == 0) {
               sorter.setRowFilter(null);
            } else {
               sorter.setRowFilter(RowFilter.regexFilter(str));
            }
         }
      });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorRegister.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorRegister().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DoctorTableViewtxt;
    private javax.swing.JTextField dAgeModifytxt;
    private javax.swing.JTextField dAgetxt;
    private javax.swing.JTextField dCityModifytxt;
    private javax.swing.JTextField dCitytxt;
    private javax.swing.JTextField dCommunityModifytxt;
    private javax.swing.JTextField dCommunitytxt;
    private javax.swing.JTextField dContactModifytxt;
    private javax.swing.JTextField dContacttxt;
    private javax.swing.JTextField dDoctorIDModifytxt;
    private javax.swing.JTextField dDoctorIDtxt;
    private javax.swing.JTextField dEmailIDModifytxt;
    private javax.swing.JTextField dEmailIDtxt;
    private javax.swing.JComboBox<String> dGenderModifytxt;
    private javax.swing.JComboBox<String> dGendertxt;
    private javax.swing.JComboBox<String> dHospitalNametxt;
    private javax.swing.JTextField dHouseModifytxt;
    private javax.swing.JTextField dHousetxt;
    private javax.swing.JTextField dNameModifytxt;
    private javax.swing.JTextField dNametxt;
    private javax.swing.JPasswordField dPasswordtxt;
    private javax.swing.JTextField dQualificationsModifytxt;
    private javax.swing.JTextField dQualificationstxt;
    private javax.swing.JPasswordField dRePasswordtxt;
    private javax.swing.JTextField dSearchBartxt;
    private javax.swing.JTextField dSpecializationModifytxt;
    private javax.swing.JTextField dSpecializationtxt;
    private javax.swing.JTextField dStateModifytxt;
    private javax.swing.JTextField dStatetxt;
    private javax.swing.JTextField dStreetModifytxt;
    private javax.swing.JTextField dZipCodeModifytxt;
    private javax.swing.JTextField dZipCodetxt;
    private javax.swing.JButton doctorCanceltBtn;
    private javax.swing.JButton doctorRegisterBtn;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton modifyDoctorDeleteBtn;
    private javax.swing.JButton modifyDoctorUpdateBtn;
    private javax.swing.JButton modifyDoctorViewBtn;
    private javax.swing.JLabel patientAgeLbl2;
    private javax.swing.JLabel patientCityLbl;
    private javax.swing.JLabel patientCityLbl1;
    private javax.swing.JLabel patientCommunityLbl;
    private javax.swing.JLabel patientCommunityLbl1;
    private javax.swing.JLabel patientContactLbl;
    private javax.swing.JLabel patientContactLbl2;
    private javax.swing.JLabel patientContactLbl3;
    private javax.swing.JLabel patientDOBLbl;
    private javax.swing.JLabel patientDOBLbl1;
    private javax.swing.JLabel patientDOBLbl2;
    private javax.swing.JLabel patientDOBLbl3;
    private javax.swing.JLabel patientEmailIDLbl2;
    private javax.swing.JLabel patientGenderLbl2;
    private javax.swing.JLabel patientHouseLbl;
    private javax.swing.JLabel patientHouseLbl1;
    private javax.swing.JLabel patientNameLbl;
    private javax.swing.JLabel patientNameLbl2;
    private javax.swing.JLabel patientPatientIDLbl1;
    private javax.swing.JLabel patientStateLbl;
    private javax.swing.JLabel patientStateLbl1;
    private javax.swing.JLabel patientStreetLbl1;
    private javax.swing.JLabel patientZipCodeLbl;
    private javax.swing.JLabel patientZipCodeLbl1;
    private javax.swing.JPanel personPersonalDetails;
    private javax.swing.JPanel personPersonalDetails1;
    private javax.swing.JButton searchDoctor;
    // End of variables declaration//GEN-END:variables
}
